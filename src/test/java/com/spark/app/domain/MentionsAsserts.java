package com.spark.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MentionsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMentionsAllPropertiesEquals(Mentions expected, Mentions actual) {
        assertMentionsAutoGeneratedPropertiesEquals(expected, actual);
        assertMentionsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMentionsAllUpdatablePropertiesEquals(Mentions expected, Mentions actual) {
        assertMentionsUpdatableFieldsEquals(expected, actual);
        assertMentionsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMentionsAutoGeneratedPropertiesEquals(Mentions expected, Mentions actual) {
        assertThat(expected)
            .as("Verify Mentions auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMentionsUpdatableFieldsEquals(Mentions expected, Mentions actual) {
        assertThat(expected)
            .as("Verify Mentions relevant properties")
            .satisfies(e -> assertThat(e.getMentionId()).as("check mentionId").isEqualTo(actual.getMentionId()))
            .satisfies(e -> assertThat(e.getMentionUsername()).as("check mentionUsername").isEqualTo(actual.getMentionUsername()))
            .satisfies(e -> assertThat(e.getDate()).as("check date").isEqualTo(actual.getDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMentionsUpdatableRelationshipsEquals(Mentions expected, Mentions actual) {
        assertThat(expected)
            .as("Verify Mentions relationships")
            .satisfies(e -> assertThat(e.getSparks()).as("check sparks").isEqualTo(actual.getSparks()));
    }
}
